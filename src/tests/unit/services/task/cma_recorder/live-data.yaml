service Task RecorderTask:
    cycle: 1 ms
    in queue recv-queue:
        max-length: 10000
    subscribe:
        /AppTest/MultiQueue:                    # - multicast subscription to the MultiQueue
            {cot: Inf}: []                      #   - on all points having Cot::Inf
    #
    # The nominal load of the crane
    let craneLoadNom:
        input: point real '/AppTest/Load.Nom' status ok #default 150.0
        # input: const real 150.0
    #
    # The nominal load of the Winch1
    let winch1LoadNom:
        input: point real '/AppTest/Winch1.Load.Nom' status ok
    #
    # The nominal load of the Winch2
    let winch2LoadNom:
        input: point real '/AppTest/Winch2.Load.Nom' status ok
    #
    # The nominal load of the Winch3
    let winch3LoadNom:
        input: point real '/AppTest/Winch3.Load.Nom' status ok
    #
    # Crane load in relative units
    let craneLoadRelative:
        input fn Div:
            input1: point real '/AppTest/Load' status ok
            input2: craneLoadNom
    #
    # 5 % of the nominal crane load - used for Op Cycle detection
    let opCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: craneLoadNom
    let winch1OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch1LoadNom
    let winch2OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch2LoadNom
    let winch3OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch3LoadNom
    #
    # Detect if operating cycle is active (true - isActive, false - isNotActive)
    let opCycleIsActive_:
        input fn BitOr:
            input0 fn Ge:
                # input1: point real '/AppTest/Load' status ok default 0.0
                input2: opCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: opCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Load' status ok default 0.0
            input1 fn Ge:
                # input1: point real '/AppTest/Winch1.Load' status ok default 0.0
                input2: winch1OpCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: winch1OpCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Winch1.Load' status ok default 0.0
            input2 fn Ge:
                # input1: point real '/AppTest/Winch2.Load' status ok default 0.0
                input2: winch2OpCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: winch2OpCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Winch2.Load' status ok default 0.0
            input3 fn Ge:
                # input1: point real '/AppTest/Winch3.Load' status ok default 0.0
                input2: winch3OpCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: winch3OpCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Winch3.Load' status ok default 0.0
    #
    # Returns one tic true if operating cycle is finished (isActive true -> false)
    let opCycleIsDone:
        input fn FallingEdge:
            input: opCycleIsActive_
    let opCycleIsActive:
        input fn BitOr:
            input1: opCycleIsActive_
            input2: opCycleIsDone
    let pumpIsActive:
        input: opCycleIsActive
    let winch1IsActive:
        input: opCycleIsActive
    let winch2IsActive:
        input: opCycleIsActive
    let winch3IsActive:
        input: opCycleIsActive


    ###############   Operating Cycle Live Data   ###############
    #
    #   table:      operating_cycle_value
    #
    #
    # Threshold for Crane load, used to compress leve data
    let craneLoadThreshold:
        input point CraneLoadThreshold:
            type: 'Real'
            send-to: /AppTest/TaskTestReceiver.in-queue
            input fn Mul:
                input1: craneLoadNom
                input2 fn PiecewiseLineApprox:
                    input: craneLoadRelative
                    piecewise:
                        0.0: 0.3
                        0.7: 0.1
                        0.85: 0.05
                        0.95: 0.01
                        1.0: 0.005
                        1.1: 0.001
    #
    # Crane load leve data compressed
    let craneLoadFiltered:
        input fn Threshold:
            threshold: craneLoadThreshold
            factor: const real 0.3 #0.05
            input: point real '/AppTest/Load' status ok


    #
    # ========= DEBUGGING =========
    #
    fn Export ExportLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneLoad:
            type: Real
        input: point real '/AppTest/Load' status ok default 150.0
    #
    fn Export ExportCraneLoadFiltered:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point craneLoadFiltered:
            type: Real
        input: craneLoadFiltered
    #
    fn Export:
        send-to: /AppTest/TaskTestReceiver.in-queue
        input: point string /AppTest/Exit status ok

    #
    # ========= PLOTTING =========
    fn Plot Plot1:
        # craneLoadNom: craneLoadNom
        craneLoad: point real '/AppTest/Load'
        # craneLoadRelative: craneLoadRelative
        opCycleIsActive: opCycleIsActive
        opCycleIsDone: opCycleIsDone
        craneLoadFiltered: craneLoadFiltered


    # #
    # # Returns true only when craneLoadFiltered value changed
    # let craneLoadIsChanged:
    #     input point IsChangedCraneLoad:
    #         type: 'Bool'
    #         send-to: /AppTest/TaskTestReceiver.in-queue
    #         input fn IsChangedValue:
    #             input: craneLoadFiltered
    # #
    # # Export Crane Load SQL to the ApiClient
    # let void2:
    #     input point OpCycleLoad:
    #         type: 'String'
    #         send-to: /AppTest/TaskTestReceiver.in-queue
    #         enable: craneLoadIsChanged
    #         input fn SqlMetric:
    #             table: public.operating_cycle_value
    #             sql: insert into {table} (pid, value, timestamp) values ({pid.value}, {input.value}, {input.timestamp});
    #             pid fn PointId:
    #                 input: point real '/AppTest/Load' status ok
    #             input: craneLoadFiltered
    # #
    # # Threshold for Winch1 load, used to compress load leve data
    # let winch1LoadThreshold:
    #     input point CraneLoadThreshold:
    #         type: 'Real'
    #         send-to: /AppTest/TaskTestReceiver.in-queue
    #         input fn Mul:
    #             input1: winch1LoadNom
    #             input2 fn PiecewiseLineApprox:
    #                 input fn Div:
    #                     input1: point real '/AppTest/Winch1.Load' status ok
    #                     input2: winch1LoadNom
    #                 piecewise:
    #                     0.0: 0.3
    #                     0.7: 0.1
    #                     0.85: 0.05
    #                     0.95: 0.01
    #                     1.0: 0.005
    #                     1.1: 0.001
    # #
    # # Winch1 load leve data compressed
    # let winch1LoadFiltered:
    #     input fn Threshold:
    #         threshold: winch1LoadThreshold
    #         factor: const real 0.3 #0.05
    #         input: point real '/AppTest/Load' status ok
    # #
    # # Export Winch1 Load SQL to the ApiClient
    # let void2:
    #     input point OpCycleLoad:
    #         type: 'String'
    #         send-to: /AppTest/TaskTestReceiver.in-queue
    #         enable fn IsChangedValue:
    #             input: winch1LoadFiltered
    #         input fn SqlMetric:
    #             table: public.operating_cycle_value
    #             sql: insert into {table} (pid, value, timestamp) values ({pid.value}, {input.value}, {input.timestamp});
    #             pid fn PointId:
    #                 input: point real '/AppTest/Load' status ok
    #             input: winch1LoadFiltered
