service Task RecorderTask:
    cycle: 1 ms
    in queue recv-queue:
        max-length: 10000
    subscribe:
        /AppTest/MultiQueue:                    # - multicast subscription to the MultiQueue
            {cot: Inf}: []                      #   - on all points having Cot::Inf
    #
    # The nominal load of the crane
    let craneLoadNom:
        input: point real '/AppTest/Load.Nom' status ok #default 150.0
        # input: const real 150.0
    #
    # The nominal load of the Winch1
    let winch1LoadNom:
        input: point real '/AppTest/Winch1.Load.Nom' status ok
    #
    # The nominal load of the Winch2
    let winch2LoadNom:
        input: point real '/AppTest/Winch2.Load.Nom' status ok
    #
    # The nominal load of the Winch3
    let winch3LoadNom:
        input: point real '/AppTest/Winch3.Load.Nom' status ok
    #
    # Crane load in relative units
    let craneLoadRelative:
        input fn Div:
            input1: point real '/AppTest/Load' status ok default 0
            input2: craneLoadNom
    # Winch1 load in relative units
    let winch1LoadRelative:
        input fn Div:
            input1: point real '/AppTest/Winch1.Load' status ok default 0
            input2: winch1LoadNom
    # Winch2 load in relative units
    let winch2LoadRelative:
        input fn Div:
            input1: point real '/AppTest/Winch2.Load' status ok default 0
            input2: winch2LoadNom
    # Winch3 load in relative units
    let winch3LoadRelative:
        input fn Div:
            input1: point real '/AppTest/Winch3.Load' status ok default 0
            input2: winch3LoadNom
    #
    # 5 % of the nominal crane load - used for Op Cycle detection
    let opCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: craneLoadNom
    let winch1OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch1LoadNom
    let winch2OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch2LoadNom
    let winch3OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch3LoadNom
    let craneIsActive:
        input fn Ge:
            # input1: point real '/AppTest/Load' status ok default 0.0
            input2: opCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: opCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Load' status ok default 0.0
    let winch1IsActive:
        input fn Ge:
            # input1: point real '/AppTest/Winch1.Load' status ok default 0.0
            input2: winch1OpCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: winch1OpCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Winch1.Load' status ok default 0.0
    let winch2IsActive:
        input fn Ge:
            # input1: point real '/AppTest/Winch2.Load' status ok default 0.0
            input2: winch2OpCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: winch2OpCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Winch2.Load' status ok default 0.0
    let winch3IsActive:
        input fn Ge:
            # input1: point real '/AppTest/Winch3.Load' status ok default 0.0
            input2: winch3OpCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: winch3OpCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Winch3.Load' status ok default 0.0
    #
    # Detect if operating cycle is active (true - isActive, false - isNotActive)
    let opCycleIsActive_:
        input fn BitOr:
            input0: craneIsActive
            input1: winch1IsActive
            input2: winch2IsActive
            input3: winch3IsActive
    #
    # Returns one tic true if operating cycle is finished (isActive true -> false)
    let opCycleIsDone:
        input fn FallingEdge:
            input: opCycleIsActive_
    let opCycleIsActive:
        input fn BitOr:
            input1: opCycleIsActive_
            input2: opCycleIsDone
    let pumpIsActive:
        input: opCycleIsActive
    #
    # Count the operating cycle ID (retained localy)
    let opCycleId:
        input fn Retain:
            key: 'OperatingCycleId'
            input fn Acc:
                initial fn Retain:
                    default: const int 0
                    key: 'OperatingCycleId'
                input: opCycleIsDone


    ###############   Operating Cycle Events (Live Data)   ###############
    #
    #   table:      operating_event
    #
    #
    # Threshold for Crane load, used to compress leve data
    let craneLoadThreshold:
        input fn Mul:
            input1: craneLoadNom
            input2 fn PiecewiseLineApprox:
                input: craneLoadRelative
                piecewise:
                    0.0: 0.3
                    0.7: 0.1
                    0.85: 0.05
                    0.95: 0.01
                    1.0: 0.005
                    1.1: 0.001
    #
    # Crane load leve data compressed
    let craneLoadFiltered_:
        input fn Threshold:
            threshold: craneLoadThreshold
            factor: const real 0.05
            input: point real '/AppTest/Load' status ok
    let craneLoadFiltered:
        input fn Filter:
            pass fn IsChangedValue:
                input: craneLoadFiltered_
            input: craneLoadFiltered_
    #
    # Threshold for Winch1 load, used to compress leve data
    let winch1LoadThreshold:
        input fn Mul:
            input1: winch1LoadNom
            input2 fn PiecewiseLineApprox:
                input: winch1LoadRelative
                piecewise:
                    0.0: 0.3
                    0.7: 0.1
                    0.85: 0.05
                    0.95: 0.01
                    1.0: 0.005
                    1.1: 0.001
    let winch1LoadFiltered_:
        input fn Threshold:
            threshold: winch1LoadThreshold
            factor: const real 0.05
            input: point real '/AppTest/Winch1.Load' status ok
    #
    # Winch1 load leve data compressed
    let winch1LoadFiltered:
        input fn Filter:
            pass fn IsChangedValue:
                input: winch1LoadFiltered_
            input: winch1LoadFiltered_
    #
    # Threshold for Winch2 load, used to compress leve data
    let winch2LoadThreshold:
        input fn Mul:
            input1: winch2LoadNom
            input2 fn PiecewiseLineApprox:
                input: winch2LoadRelative
                piecewise:
                    0.0: 0.3
                    0.7: 0.1
                    0.85: 0.05
                    0.95: 0.01
                    1.0: 0.005
                    1.1: 0.001
    let winch2LoadFiltered_:
        input fn Threshold:
            threshold: winch2LoadThreshold
            factor: const real 0.05
            input: point real '/AppTest/Winch2.Load' status ok
    #
    # Winch2 load leve data compressed
    let winch2LoadFiltered:
        input fn Filter:
            pass fn IsChangedValue:
                input: winch2LoadFiltered_
            input: winch2LoadFiltered_
    #
    # Threshold for Winch3 load, used to compress leve data
    let winch3LoadThreshold:
        input fn Mul:
            input1: winch3LoadNom
            input2 fn PiecewiseLineApprox:
                input: winch3LoadRelative
                piecewise:
                    0.0: 0.3
                    0.7: 0.1
                    0.85: 0.05
                    0.95: 0.01
                    1.0: 0.005
                    1.1: 0.001
    let winch3LoadFiltered_:
        input fn Threshold:
            threshold: winch3LoadThreshold
            factor: const real 0.05
            input: point real '/AppTest/Winch3.Load' status ok
    #
    # Winch3 load leve data compressed
    let winch3LoadFiltered:
        input fn Filter:
            pass fn IsChangedValue:
                input: winch3LoadFiltered_
            input: winch3LoadFiltered_
    #
    # Export operating events into the database
    #
    #
    # Crane MOPS truggered
    let craneMopsTriggered:
        input: point int '/AppTest/CraneMode.MOPS' status ok
    fn Export ExportCraneMopsEvent:
        enable fn RisingEdge:
            input: point int '/AppTest/CraneMode.MOPS' status ok
        send-to: /AppTest/ApiClient.in-queue
        conf point CraneMopsEvent:
            type: String
        input fn SqlMetric: 
            table: public.rec_operating_event
            sql: insert into {table} (operating_cycle_id, timestamp, event_id, value, status) values ({opCycleId.value}, '{input.timestamp}', 'CraneMOPSEvent', {input.value}, 0);
            opCycleId: opCycleId
            input: point int '/AppTest/CraneMode.MOPS' status ok
    #
    # Crane AOPS truggered
    let craneAopsTriggered:
        input: point int '/AppTest/CraneMode.AOPS' status ok
    fn Export ExportCraneAopsEvent:
        enable fn RisingEdge:
            input: point int '/AppTest/CraneMode.AOPS' status ok
        send-to: /AppTest/ApiClient.in-queue
        conf point CraneMopsEvent:
            type: String
        input fn SqlMetric: 
            table: public.rec_operating_event
            sql: insert into {table} (operating_cycle_id, timestamp, event_id, value, status) values ({opCycleId.value}, '{input.timestamp}', 'CraneAOPSEvent', {input.value}, 0);
            opCycleId: opCycleId
            input: point int '/AppTest/CraneMode.AOPS' status ok
    #
    fn Export ExportCraneLoadEvent:
        send-to: /AppTest/ApiClient.in-queue
        conf point CraneLoadEvent:
            type: String
        input fn SqlMetric: 
            table: public.rec_operating_event
            sql: insert into {table} (operating_cycle_id, timestamp, event_id, value, status) values ({opCycleId.value}, '{input.timestamp}', 'CraneLoadEvent', {input.value}, 0);
            opCycleId: opCycleId
            input: craneLoadFiltered
    #
    fn Export ExportWinch1LoadEvent:
        send-to: /AppTest/ApiClient.in-queue
        conf point Winch1LoadEvent:
            type: String
        input fn SqlMetric: 
            table: public.rec_operating_event
            sql: insert into {table} (operating_cycle_id, timestamp, event_id, value, status) values ({opCycleId.value}, '{input.timestamp}', 'Winch1LoadEvent', {input.value}, 0);
            opCycleId: opCycleId
            input: winch1LoadFiltered
    #
    fn Export ExportWinch2LoadEvent:
        send-to: /AppTest/ApiClient.in-queue
        conf point Winch2LoadEvent:
            type: String
        input fn SqlMetric: 
            table: public.rec_operating_event
            sql: insert into {table} (operating_cycle_id, timestamp, event_id, value, status) values ({opCycleId.value}, '{input.timestamp}', 'Winch2LoadEvent', {input.value}, 0);
            opCycleId: opCycleId
            input: winch2LoadFiltered
    #
    fn Export ExportWinch3LoadEvent:
        send-to: /AppTest/ApiClient.in-queue
        conf point Winch3LoadEvent:
            type: String
        input fn SqlMetric: 
            table: public.rec_operating_event
            sql: insert into {table} (operating_cycle_id, timestamp, event_id, value, status) values ({opCycleId.value}, '{input.timestamp}', 'Winch3LoadEvent', {input.value}, 0);
            opCycleId: opCycleId
            input: winch3LoadFiltered



    #
    # ========= DEBUGGING =========
    #
    fn Export ExportLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneLoad:
            type: Real
        input: point real '/AppTest/Load' status ok
    #
    fn Export ExportCraneLoadFiltered:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point craneLoadFiltered:
            type: Real
        input: craneLoadFiltered
    #
    fn Export ExportWinch1LoadFiltered:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point winch1LoadFiltered:
            type: Real
        input: winch1LoadFiltered
    #
    fn Export ExportWinch2LoadFiltered:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point winch2LoadFiltered:
            type: Real
        input: winch2LoadFiltered
    #
    fn Export ExportWinch3LoadFiltered:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point winch3LoadFiltered:
            type: Real
        input: winch3LoadFiltered
    #
    fn Export:
        send-to: /AppTest/TaskTestReceiver.in-queue
        input: point string /AppTest/Exit status ok

    #
    # ========= PLOTTING =========
    fn Plot Plot1:
        # craneLoadNom: craneLoadNom
        craneLoad: point real '/AppTest/Load'
        # craneLoadRelative: craneLoadRelative
        craneLoadFiltered: craneLoadFiltered
        winch1LoadRelative: winch1LoadRelative
        winch1LoadFiltered: winch1LoadFiltered
        winch2LoadRelative: winch2LoadRelative
        winch2LoadFiltered: winch2LoadFiltered
        winch3LoadRelative: winch3LoadRelative
        winch3LoadFiltered: winch3LoadFiltered
        craneMopsTriggered: craneMopsTriggered
        craneAopsTriggered: craneAopsTriggered
        opCycleIsActive: opCycleIsActive
        opCycleIsDone: opCycleIsDone
