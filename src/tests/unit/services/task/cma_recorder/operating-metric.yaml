service Task RecorderTaskOperatingMetric:
    cycle: 1 ms
    in queue recv-queue:
        max-length: 10000
    subscribe:
        /AppTest/MultiQueue:                    # - multicast subscription to the MultiQueue
            {cot: Inf}: []                      #   - on all points having Cot::Inf
    #
    # The nominal load of the crane
    let craneLoadNom:
        input: point real '/AppTest/Load.Nom' status ok #default 150.0
        # input: const real 150.0
    #
    # The nominal load of the Winch1
    let winch1LoadNom:
        input: point real '/AppTest/Winch1.Load.Nom' status ok
    #
    # The nominal load of the Winch2
    let winch2LoadNom:
        input: point real '/AppTest/Winch2.Load.Nom' status ok
    #
    # The nominal load of the Winch3
    let winch3LoadNom:
        input: point real '/AppTest/Winch3.Load.Nom' status ok
    #
    # Crane load in relative units
    let craneLoadRelative:
        input fn Div:
            input1: point real '/AppTest/Load' status ok default 0.0
            input2: craneLoadNom
    #
    # 5 % of the nominal crane load - used for Op Cycle detection
    let opCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: craneLoadNom
    let winch1OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch1LoadNom
    let winch2OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch2LoadNom
    let winch3OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch3LoadNom
    let smooth:
        input fn Smooth:
            factor: const real 0.125
            input: point real '/AppTest/Load' status ok default 0.0

    let craneIsActive:
        input fn Ge:
            # input1: point real '/AppTest/Load' status ok default 0.0
            input2: opCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: opCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Load' status ok default 0.0
    let winch1IsActive:
        input fn Ge:
            # input1: point real '/AppTest/Winch1.Load' status ok default 0.0
            input2: winch1OpCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: winch1OpCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Winch1.Load' status ok default 0.0
    let winch2IsActive:
        input fn Ge:
            # input1: point real '/AppTest/Winch2.Load' status ok default 0.0
            input2: winch2OpCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: winch2OpCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Winch2.Load' status ok default 0.0
    let winch3IsActive:
        input fn Ge:
            # input1: point real '/AppTest/Winch3.Load' status ok default 0.0
            input2: winch3OpCycleThreshold
            input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                threshold: winch3OpCycleThreshold
                input fn Smooth:
                    factor: const real 0.125
                    input: point real '/AppTest/Winch3.Load' status ok default 0.0
    #
    # Detect if operating cycle is active (true - isActive, false - isNotActive)
    let opCycleIsActive_:
        input fn BitOr:
            input0: craneIsActive
            input1: winch1IsActive
            input2: winch2IsActive
            input3: winch3IsActive
    #
    # Returns one tic true if operating cycle is finished (isActive true -> false)
    let opCycleIsDone:
        input fn FallingEdge:
            input: opCycleIsActive_
    let opCycleIsActive:
        input fn BitOr:
            input1: opCycleIsActive_
            input2: opCycleIsDone
    #
    # Count the operating cycle ID (retained localy)
    let opCycleId:
        input fn Retain:
            key: 'OperatingCycleId'
            input fn Acc:
                initial fn Retain:
                    default: const int 0
                    key: 'OperatingCycleId'
                input: opCycleIsDone
    #
    # Total operating cycles (retained localy)
    let craneOperatingCyclesTotal:
        input fn Add:
            input1: opCycleId
            input2: const int 0
    #
    # Crane Average load in operating cycle, ??? unit ???
    let craneCycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Load' status ok   # ??? unit ???
    #
    # Crane Average load in operating cycle in relative units
    let craneCycleAverageLoadRelative:
        input fn Div:
            input1: craneCycleAverageLoad
            input2: craneLoadNom
    #
    # Crane Max load in operating cycle, ??? unit ???
    let craneCycleMaxLoad:
        input fn KeepValid:
            input fn Max:
                enable: opCycleIsActive_
                input: point real '/AppTest/Load' status ok   # ??? unit ???
    # Winch1 Average load in operating cycle, ??? unit ???
    let winch1CycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Winch1.Load' status ok   # ??? unit ???
    #
    # Winch1 Average load in operating cycle in relative units
    let winch1CycleAverageLoadRelative:
        input fn Div:
            input1: winch1CycleAverageLoad
            input2: winch1LoadNom
    #
    # Winch2 Average load in operating cycle, ??? unit ???
    let winch2CycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Winch2.Load' status ok   # ??? unit ???
    #
    # Winch2 Average load in operating cycle in relative units
    let winch2CycleAverageLoadRelative:
        input fn Div:
            input1: winch2CycleAverageLoad
            input2: winch2LoadNom
    #
    # Winch3 Average load in operating cycle, ??? unit ???
    let winch3CycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Winch3.Load' status ok   # ??? unit ???
    #
    # Winch3 Average load in operating cycle in relative units
    let winch3CycleAverageLoadRelative:
        input fn Div:
            input1: winch3CycleAverageLoad
            input2: winch3LoadNom
    #
    # Alarm class of the operating cycle
    # Must be >0 if one of metric is alarmed
    let alarmClass:
        input: const int 0

    #
    # ========= DEBUGGING =========
    fn Export ExportLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneLoad:
            type: Real
        input: point real '/AppTest/Load' status ok # default 150.0
    #
    fn Export ExportOpCycleIsActive:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point OpCycleIsActive:
            type: 'Bool'
        input: opCycleIsActive
    #
    fn Export ExportOpCycleIsDone:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point OpCycleIsDone:
            type: 'Bool'
        input: opCycleIsDone
    #
    fn Export ExportCraneCycleAverageLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneCycleAverageLoad:
            type: Real
        input: craneCycleAverageLoad
    #
    fn Export ExportCraneCycleAverageLoadRelative:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneCycleAverageLoadRelative:
            type: Real
        input: craneCycleAverageLoadRelative
    #
    fn Export ExportCraneCycleMaxLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneCycleMaxLoad:
            type: Real
        input: craneCycleMaxLoad
    #
    fn Export:
        send-to: /AppTest/TaskTestReceiver.in-queue
        input: point string /AppTest/Exit status ok
    # ========= DEBUGGING =========




    #
    # ========= PLOTTING =========
    fn Plot Plot1:
        craneLoadNom: craneLoadNom
        craneLoad: point real '/AppTest/Load'
        craneLoadDefault: point real '/AppTest/Load' status ok default 0.0
        craneLoadRelative: craneLoadRelative
        opCycleThreshold: opCycleThreshold
        smooth: smooth
        craneIsActive: craneIsActive
        opCycleIsActive: opCycleIsActive
        opCycleIsDone: opCycleIsDone
        craneCycleAverageLoad: craneCycleAverageLoad



    ###############   Operating Cycle + Metrics   ###############
    #
    #   table:      rec_operating_cycle
    #   table:      rec_operating_metric
    #
    fn RecOpCycleMetric:
        # send-to: /AppTest/ApiClient.in-queue
        send-to: /AppTest/TaskTestReceiver.in-queue
        op-cycle: opCycleIsActive
        # conf point OpCycleSql:
        #     type: 'String'
        #
        # Operating cycle
        input1 fn SqlMetric:
            table: public.rec_operating_cycle
            sql: insert into {table} (id, timestamp_start, timestamp_stop, alarm_class) values ({opCycleId.value}, '{start.timestamp}', '{stop.timestamp}', {alarmClass.value});
            opCycleId: opCycleId
            start fn KeepValid:
                input fn Filter:
                    pass fn RisingEdge:
                        input: opCycleIsActive
                    input: point real '/AppTest/Load' status ok
            stop: point real '/AppTest/Load' status ok
            alarmClass: alarmClass
        #
        # Operating cycle metric 'Average Load'
        input2 fn SqlMetric:
            table: public.rec_operating_metric
            sql: insert into {table} (operating_cycle_id, metric_id, value) values ({opCycleId.value}, 'average_load', {input.value});
            opCycleId: opCycleId
            input: craneCycleAverageLoad
        #
        # Operating cycle metric 'Max Load'
        input3 fn SqlMetric:
            table: public.rec_operating_metric
            sql: insert into {table} (operating_cycle_id, metric_id, value) values ({opCycleId.value}, 'max_load', {input.value});
            opCycleId: opCycleId
            input: craneCycleMaxLoad
