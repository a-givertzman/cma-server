service Task RecorderTaskOperatingMetric:
    cycle: 1 ms
    in queue recv-queue:
        max-length: 10000
    subscribe:
        /AppTest/MultiQueue:                    # - multicast subscription to the MultiQueue
            {cot: Inf}: []                      #   - on all points having Cot::Inf
    #
    # The nominal load of the crane
    let craneLoadNom:
        input: point real '/AppTest/Load.Nom' status ok #default 150.0
        # input: const real 150.0
    #
    # The nominal load of the Winch1
    let winch1LoadNom:
        input: point real '/AppTest/Winch1.Load.Nom' status ok
    #
    # The nominal load of the Winch2
    let winch2LoadNom:
        input: point real '/AppTest/Winch2.Load.Nom' status ok
    #
    # The nominal load of the Winch3
    let winch3LoadNom:
        input: point real '/AppTest/Winch3.Load.Nom' status ok
    #
    # Crane load in relative units
    let craneLoadRelative:
        input fn Div:
            input1: point real '/AppTest/Load' status ok
            input2: craneLoadNom
    #
    # 5 % of the nominal crane load - used for Op Cycle detection
    let opCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: craneLoadNom
    let winch1OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch1LoadNom
    let winch2OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch2LoadNom
    let winch3OpCycleThreshold:
        input fn Mul:
            input1: const real 0.05
            input2: winch3LoadNom
    #
    # Detect if operating cycle is active (true - isActive, false - isNotActive)
    let opCycleIsActive_:
        input fn BitOr:
            input0 fn Ge:
                # input1: point real '/AppTest/Load' status ok default 0.0
                input2: opCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: opCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Load' status ok default 0.0
            input1 fn Ge:
                # input1: point real '/AppTest/Winch1.Load' status ok default 0.0
                input2: winch1OpCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: winch1OpCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Winch1.Load' status ok default 0.0
            input2 fn Ge:
                # input1: point real '/AppTest/Winch2.Load' status ok default 0.0
                input2: winch2OpCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: winch2OpCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Winch2.Load' status ok default 0.0
            input3 fn Ge:
                # input1: point real '/AppTest/Winch3.Load' status ok default 0.0
                input2: winch3OpCycleThreshold
                input1 fn Threshold:                 # Triggering threshold of the operating cycle detection function on the input value based on the nominal value
                    threshold: winch3OpCycleThreshold
                    input fn Smooth:
                        factor: const real 0.125
                        input: point real '/AppTest/Winch3.Load' status ok default 0.0
    #
    # Returns one tic true if operating cycle is finished (isActive true -> false)
    let opCycleIsDone:
        input fn FallingEdge:
            input: opCycleIsActive_
    let opCycleIsActive:
        input fn BitOr:
            input1: opCycleIsActive_
            input2: opCycleIsDone
    let pumpIsActive:
        input: opCycleIsActive
    let winch1IsActive:
        input: opCycleIsActive
    let winch2IsActive:
        input: opCycleIsActive
    let winch3IsActive:
        input: opCycleIsActive
    #
    # Alarm class of the operating cycle
    # Must be >0 if one of metric is alarmed
    let alarmClass:
        input: const int 0
    #
    # Count the operating cycle ID (retained localy)
    let opCycleId:
        input fn Retain:
            key: 'OperatingCycleId'
            input fn Acc:
                initial fn Retain:
                    default: const int 0
                    key: 'OperatingCycleId'
                input: opCycleIsDone
    #
    # Total operating cycles (retained localy)
    let craneOperatingCyclesTotal:
        input fn Add:
            input1: opCycleId
            input2: const int 0


    #
    # Crane Average load in operating cycle, ??? unit ???
    let craneCycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Load' status ok   # ??? unit ???
    #
    # Crane Average load in operating cycle in relative units
    let craneCycleAverageLoadRelative:
        input fn Div:
            input1: craneCycleAverageLoad
            input2: craneLoadNom
    #
    # Crane Max load in operating cycle, ??? unit ???
    let craneCycleMaxLoad:
        input fn KeepValid:
            input fn Max:
                enable: opCycleIsActive_
                input: point real '/AppTest/Load' status ok   # ??? unit ???
    # Winch1 Average load in operating cycle, ??? unit ???
    let winch1CycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Winch1.Load' status ok   # ??? unit ???
    #
    # Winch1 Average load in operating cycle in relative units
    let winch1CycleAverageLoadRelative:
        input fn Div:
            input1: winch1CycleAverageLoad
            input2: winch1LoadNom
    #
    # Winch2 Average load in operating cycle, ??? unit ???
    let winch2CycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Winch2.Load' status ok   # ??? unit ???
    #
    # Winch2 Average load in operating cycle in relative units
    let winch2CycleAverageLoadRelative:
        input fn Div:
            input1: winch2CycleAverageLoad
            input2: winch2LoadNom
    #
    # Winch3 Average load in operating cycle, ??? unit ???
    let winch3CycleAverageLoad:
        input fn KeepValid:
            input fn Average:
                enable: opCycleIsActive_
                input: point real '/AppTest/Winch3.Load' status ok   # ??? unit ???
    #
    # Winch3 Average load in operating cycle in relative units
    let winch3CycleAverageLoadRelative:
        input fn Div:
            input1: winch3CycleAverageLoad
            input2: winch3LoadNom

    #
    # ========= DEBUGGING =========
    fn Export ExportLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneLoad:
            type: Real
        input: point real '/AppTest/Load' status ok default 150.0
    #
    fn Export ExportOpCycleIsActive:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point OpCycleIsActive:
            type: 'Bool'
        input: opCycleIsActive
    #
    fn Export ExportOpCycleIsDone:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point OpCycleIsDone:
            type: 'Bool'
        input: opCycleIsDone
    #
    fn Export ExportCraneCycleAverageLoad:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneCycleAverageLoad:
            type: Real
        input: craneCycleAverageLoad
    #
    fn Export ExportCraneCycleAverageLoadRelative:
        send-to: /AppTest/TaskTestReceiver.in-queue
        conf point CraneCycleAverageLoadRelative:
            type: Real
        input: craneCycleAverageLoadRelative
    #
    fn Export:
        send-to: /AppTest/TaskTestReceiver.in-queue
        input: point string /AppTest/Exit status ok
    # ========= DEBUGGING =========


    #
    # Winch1 load-limiter-trip-count
    let winch1LoadLimiterTripCount:
        input fn Retain:
            key: 'winch1-load-limiter-trip-count'
            input fn Acc:
                initial fn Retain:
                    default: const int 0
                    key: 'winch1-load-limiter-trip-count'
                input fn RisingEdge:
                    input: point bool '/AppTest/Winch1.Load.Limiter.Trip' status ok
    #
    # Winch2 load-limiter-trip-count
    let winch2LoadLimiterTripCount:
        input fn Retain:
            key: 'winch2-load-limiter-trip-count'
            input fn Acc:
                initial fn Retain:
                    default: const int 0
                    key: 'winch2-load-limiter-trip-count'
                input fn RisingEdge:
                    input: point bool '/AppTest/Winch2.Load.Limiter.Trip' status ok
    #
    # Winch3 load-limiter-trip-count
    let winch3LoadLimiterTripCount:
        input fn Retain:
            key: 'winch3-load-limiter-trip-count'
            input fn Acc:
                initial fn Retain:
                    default: const int 0
                    key: 'winch3-load-limiter-trip-count'
                input fn RisingEdge:
                    input: point bool '/AppTest/Winch3.Load.Limiter.Trip' status ok
    #
    # crane-characteristic-number	текущее характеристическое число для крана
    let craneEigenValue:
        input fn Retain:
            enable: opCycleIsActive
            key: 'crane-characteristic-number'
            input fn Add:
                input1 fn Pow:
                    input1 fn Div:
                        input1: craneCycleMaxLoad
                        input2: craneLoadNom
                    input2: const real 3.0
                input2 fn Retain:
                    default: const real 0.0
                    key: 'crane-characteristic-number'
    #
    # The duration of the crane operation cycle in seconds
    let craneOperatingCycleSecs:
        input fn Timer:
            enable: opCycleIsActive
            initial: const real 0.0
            input: opCycleIsActive
    #
    # winch1-characteristic-number	текущее характеристическое число лебедка 1
    let winch1EigenValue:
        input fn Retain:
            enable: opCycleIsActive
            key: 'winch1-characteristic-number'
            input fn Add:
                input1 fn Mul:
                    input1 fn Pow:
                        input1 fn Div:
                            input1: winch1CycleAverageLoad
                            input2: winch1LoadNom
                        input2: const real 3.0
                    input2: craneOperatingCycleSecs
                input2 fn Retain:
                    default: const real 0.0
                    key: 'winch1-characteristic-number'
    #
    # winch2-characteristic-number	текущее характеристическое число лебедка 2
    let winch2EigenValue:
        input fn Retain:
            enable: opCycleIsActive
            key: 'winch2-characteristic-number'
            input fn Add:
                input1 fn Mul:
                    input1 fn Pow:
                        input1 fn Div:
                            input1: winch2CycleAverageLoad
                            input2: winch2LoadNom
                        input2: const real 3.0
                    input2: craneOperatingCycleSecs
                input2 fn Retain:
                    default: const real 0.0
                    key: 'winch2-characteristic-number'
    #
    # winch3-characteristic-number	текущее характеристическое число лебедка 3
    let winch3EigenValue:
        input fn Retain:
            enable: opCycleIsActive
            key: 'winch3-characteristic-number'
            input fn Add:
                input1 fn Mul:
                    input1 fn Pow:
                        input1 fn Div:
                            input1: winch3CycleAverageLoad
                            input2: winch3LoadNom
                        input2: const real 3.0
                    input2: craneOperatingCycleSecs
                input2 fn Retain:
                    default: const real 0.0
                    key: 'winch3-characteristic-number'
    #
    # Count of Crane cycles in load-range 0.05-0.15
    let craneLoadInRange_0_05_0_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.05
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.15
    let cyclesInLoadRange_0_05_0_15:
        input fn Retain:
            enable: craneLoadInRange_0_05_0_15
            key: 'CraneCyclesInLoadRange_0.05_0.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.05_0.15'
                input2: const int 1
    let craneAverageLoadInRabge_0_05_0_15_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_05_0_15
            key: 'CraneAverageLoadInRange_0.05_0.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_05_0_15
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.05_0.15'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.15-0.25
    let craneLoadInRange_0_15_0_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.15
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.25
    let cyclesInLoadRange_0_15_0_25:
        input fn Retain:
            enable: craneLoadInRange_0_15_0_25
            key: 'CraneCyclesInLoadRange_0.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.15_0.25'
                input2: const int 1
    let craneAverageLoadInRabge_0_15_0_25_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_15_0_25
            key: 'CraneAverageLoadInRange_0.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_15_0_25
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.15_0.25'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.25-0.35
    let craneLoadInRange_0_25_0_35:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.25
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.35
    let cyclesInLoadRange_0_25_0_35:
        input fn Retain:
            enable: craneLoadInRange_0_25_0_35
            key: 'CraneCyclesInLoadRange_0.25_0.35'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.25_0.35'
                input2: const int 1
    let craneAverageLoadInRabge_0_25_0_35_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_25_0_35
            key: 'CraneAverageLoadInRange_0.25_0.35'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_25_0_35
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.25_0.35'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.35-0.45
    let craneLoadInRange_0_35_0_45:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.35
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.45
    let cyclesInLoadRange_0_35_0_45:
        input fn Retain:
            enable: craneLoadInRange_0_35_0_45
            key: 'CraneCyclesInLoadRange_0.35_0.45'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.35_0.45'
                input2: const int 1
    let craneAverageLoadInRabge_0_35_0_45_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_35_0_45
            key: 'CraneAverageLoadInRange_0.35_0.45'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_35_0_45
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.35_0.45'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.45-0.55
    let craneLoadInRange_0_45_0_55:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.45
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.55
    let cyclesInLoadRange_0_45_0_55:
        input fn Retain:
            enable: craneLoadInRange_0_45_0_55
            key: 'CraneCyclesInLoadRange_0.45_0.55'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.45_0.55'
                input2: const int 1
    let craneAverageLoadInRabge_0_45_0_55_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_45_0_55
            key: 'CraneAverageLoadInRange_0.45_0.55'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_45_0_55
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.45_0.55'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.55-0.65
    let craneLoadInRange_0_55_0_65:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.55
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.65
    let cyclesInLoadRange_0_55_0_65:
        input fn Retain:
            enable: craneLoadInRange_0_55_0_65
            key: 'CraneCyclesInLoadRange_0.55_0.65'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.55_0.65'
                input2: const int 1
    let craneAverageLoadInRabge_0_55_0_65_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_55_0_65
            key: 'CraneAverageLoadInRange_0.55_0.65'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_55_0_65
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.55_0.65'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.65-0.75
    let craneLoadInRange_0_65_0_75:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.65
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.75
    let cyclesInLoadRange_0_65_0_75:
        input fn Retain:
            enable: craneLoadInRange_0_65_0_75
            key: 'CraneCyclesInLoadRange_0.65_0.75'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.65_0.75'
                input2: const int 1
    let craneAverageLoadInRabge_0_65_0_75_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_65_0_75
            key: 'CraneAverageLoadInRange_0.65_0.75'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_65_0_75
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.65_0.75'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.75-0.85
    let craneLoadInRange_0_75_0_85:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.75
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.85
    let cyclesInLoadRange_0_75_0_85:
        input fn Retain:
            enable: craneLoadInRange_0_75_0_85
            key: 'CraneCyclesInLoadRange_0.75_0.85'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.75_0.85'
                input2: const int 1
    let craneAverageLoadInRabge_0_75_0_85_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_75_0_85
            key: 'CraneAverageLoadInRange_0.75_0.85'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_75_0_85
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.75_0.85'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.85-0.95
    let craneLoadInRange_0_85_0_95:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.85
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.95
    let cyclesInLoadRange_0_85_0_95:
        input fn Retain:
            enable: craneLoadInRange_0_85_0_95
            key: 'CraneCyclesInLoadRange_0.85_0.95'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.85_0.95'
                input2: const int 1
    let craneAverageLoadInRabge_0_85_0_95_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_85_0_95
            key: 'CraneAverageLoadInRange_0.85_0.95'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_85_0_95
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.85_0.95'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 0.95-1.05
    let craneLoadInRange_0_95_1_05:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 0.95
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 1.05
    let cyclesInLoadRange_0_95_1_05:
        input fn Retain:
            enable: craneLoadInRange_0_95_1_05
            key: 'CraneCyclesInLoadRange_0.95_1.05'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_0.95_1.05'
                input2: const int 1
    let craneAverageLoadInRabge_0_95_1_05_Relative:
        input fn Retain:
            enable: craneLoadInRange_0_95_1_05
            key: 'CraneAverageLoadInRange_0.95_1.05'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_0_95_1_05
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_0.95_1.05'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 1.05-1.15
    let craneLoadInRange_1_05_1_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 1.05
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 1.15
    let cyclesInLoadRange_1_05_1_15:
        input fn Retain:
            enable: craneLoadInRange_1_05_1_15
            key: 'CraneCyclesInLoadRange_1.05_1.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_1.05_1.15'
                input2: const int 1
    let craneAverageLoadInRabge_1_05_1_15_Relative:
        input fn Retain:
            enable: craneLoadInRange_1_05_1_15
            key: 'CraneAverageLoadInRange_1.05_1.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_1_05_1_15
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_1.05_1.15'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 1.15-1.25
    let craneLoadInRange_1_15_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 1.15
            input3 fn Lt:
                input1: craneCycleAverageLoadRelative
                input2: const real 1.25
    let cyclesInLoadRange_1_15_1_25:
        input fn Retain:
            enable: craneLoadInRange_1_15_1_25
            key: 'CraneCyclesInLoadRange_1.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_1.15_0.25'
                input2: const int 1
    let craneAverageLoadInRabge_1_15_1_25_Relative:
        input fn Retain:
            enable: craneLoadInRange_1_15_1_25
            key: 'CraneAverageLoadInRange_1.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_1_15_1_25
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_1.15_0.25'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Crane cycles in load-range 1.25-
    let craneLoadInRange_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: craneCycleAverageLoadRelative
                input2: const real 1.25
    let cyclesInLoadRange_1_25:
        input fn Retain:
            enable: craneLoadInRange_1_25
            key: 'CraneCyclesInLoadRange_1.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'CraneCyclesInLoadRange_1.25'
                input2: const int 1
    let craneAverageLoadInRabge_1_25_Relative:
        input fn Retain:
            enable: craneLoadInRange_1_25
            key: 'CraneAverageLoadInRange_1.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: craneLoadInRange_1_25
                        default: craneCycleAverageLoadRelative
                        key: 'CraneAverageLoadInRange_1.25'
                    input2: craneCycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.05-0.15
    let winch1LoadInRange_0_05_0_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.05
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.15
    let winch1CyclesInLoadRange_0_05_0_15:
        input fn Retain:
            enable: winch1LoadInRange_0_05_0_15
            key: 'Winch1CyclesInLoadRange_0.05_0.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.05_0.15'
                input2: const int 1
    let winch1AverageLoadInRabge_0_05_0_15_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_05_0_15
            key: 'Winch1AverageLoadInRange_0.05_0.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_05_0_15
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.05_0.15'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.15-0.25
    let winch1LoadInRange_0_15_0_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.15
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.25
    let winch1CyclesInLoadRange_0_15_0_25:
        input fn Retain:
            enable: winch1LoadInRange_0_15_0_25
            key: 'Winch1CyclesInLoadRange_0.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.15_0.25'
                input2: const int 1
    let winch1AverageLoadInRabge_0_15_0_25_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_15_0_25
            key: 'Winch1AverageLoadInRange_0.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_15_0_25
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.15_0.25'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.25-0.35
    let winch1LoadInRange_0_25_0_35:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.25
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.35
    let winch1CyclesInLoadRange_0_25_0_35:
        input fn Retain:
            enable: winch1LoadInRange_0_25_0_35
            key: 'Winch1CyclesInLoadRange_0.25_0.35'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.25_0.35'
                input2: const int 1
    let winch1AverageLoadInRabge_0_25_0_35_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_25_0_35
            key: 'Winch1AverageLoadInRange_0.25_0.35'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_25_0_35
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.25_0.35'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.35-0.45
    let winch1LoadInRange_0_35_0_45:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.35
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.45
    let winch1CyclesInLoadRange_0_35_0_45:
        input fn Retain:
            enable: winch1LoadInRange_0_35_0_45
            key: 'Winch1CyclesInLoadRange_0.35_0.45'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.35_0.45'
                input2: const int 1
    let winch1AverageLoadInRabge_0_35_0_45_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_35_0_45
            key: 'Winch1AverageLoadInRange_0.35_0.45'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_35_0_45
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.35_0.45'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.45-0.55
    let winch1LoadInRange_0_45_0_55:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.45
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.55
    let winch1CyclesInLoadRange_0_45_0_55:
        input fn Retain:
            enable: winch1LoadInRange_0_45_0_55
            key: 'Winch1CyclesInLoadRange_0.45_0.55'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.45_0.55'
                input2: const int 1
    let winch1AverageLoadInRabge_0_45_0_55_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_45_0_55
            key: 'Winch1AverageLoadInRange_0.45_0.55'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_45_0_55
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.45_0.55'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.55-0.65
    let winch1LoadInRange_0_55_0_65:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.55
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.65
    let winch1CyclesInLoadRange_0_55_0_65:
        input fn Retain:
            enable: winch1LoadInRange_0_55_0_65
            key: 'Winch1CyclesInLoadRange_0.55_0.65'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.55_0.65'
                input2: const int 1
    let winch1AverageLoadInRabge_0_55_0_65_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_55_0_65
            key: 'Winch1AverageLoadInRange_0.55_0.65'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_55_0_65
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.55_0.65'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.65-0.75
    let winch1LoadInRange_0_65_0_75:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.65
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.75
    let winch1CyclesInLoadRange_0_65_0_75:
        input fn Retain:
            enable: winch1LoadInRange_0_65_0_75
            key: 'Winch1CyclesInLoadRange_0.65_0.75'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.65_0.75'
                input2: const int 1
    let winch1AverageLoadInRabge_0_65_0_75_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_65_0_75
            key: 'Winch1AverageLoadInRange_0.65_0.75'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_65_0_75
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.65_0.75'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.75-0.85
    let winch1LoadInRange_0_75_0_85:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.75
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.85
    let winch1CyclesInLoadRange_0_75_0_85:
        input fn Retain:
            enable: winch1LoadInRange_0_75_0_85
            key: 'Winch1CyclesInLoadRange_0.75_0.85'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.75_0.85'
                input2: const int 1
    let winch1AverageLoadInRabge_0_75_0_85_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_75_0_85
            key: 'Winch1AverageLoadInRange_0.75_0.85'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_75_0_85
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.75_0.85'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.85-0.95
    let winch1LoadInRange_0_85_0_95:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.85
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.95
    let winch1CyclesInLoadRange_0_85_0_95:
        input fn Retain:
            enable: winch1LoadInRange_0_85_0_95
            key: 'Winch1CyclesInLoadRange_0.85_0.95'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.85_0.95'
                input2: const int 1
    let winch1AverageLoadInRabge_0_85_0_95_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_85_0_95
            key: 'Winch1AverageLoadInRange_0.85_0.95'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_85_0_95
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.85_0.95'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 0.95-1.05
    let winch1LoadInRange_0_95_1_05:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 0.95
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 1.05
    let winch1CyclesInLoadRange_0_95_1_05:
        input fn Retain:
            enable: winch1LoadInRange_0_95_1_05
            key: 'Winch1CyclesInLoadRange_0.95_1.05'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_0.95_1.05'
                input2: const int 1
    let winch1AverageLoadInRabge_0_95_1_05_Relative:
        input fn Retain:
            enable: winch1LoadInRange_0_95_1_05
            key: 'Winch1AverageLoadInRange_0.95_1.05'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_0_95_1_05
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_0.95_1.05'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 1.05-1.15
    let winch1LoadInRange_1_05_1_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 1.05
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 1.15
    let winch1CyclesInLoadRange_1_05_1_15:
        input fn Retain:
            enable: winch1LoadInRange_1_05_1_15
            key: 'Winch1CyclesInLoadRange_1.05_1.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_1.05_1.15'
                input2: const int 1
    let winch1AverageLoadInRabge_1_05_1_15_Relative:
        input fn Retain:
            enable: winch1LoadInRange_1_05_1_15
            key: 'Winch1AverageLoadInRange_1.05_1.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_1_05_1_15
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_1.05_1.15'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 1.15-1.25
    let winch1LoadInRange_1_15_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 1.15
            input3 fn Lt:
                input1: winch1CycleAverageLoadRelative
                input2: const real 1.25
    let winch1CyclesInLoadRange_1_15_1_25:
        input fn Retain:
            enable: winch1LoadInRange_1_15_1_25
            key: 'Winch1CyclesInLoadRange_1.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_1.15_0.25'
                input2: const int 1
    let winch1AverageLoadInRabge_1_15_1_25_Relative:
        input fn Retain:
            enable: winch1LoadInRange_1_15_1_25
            key: 'Winch1AverageLoadInRange_1.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_1_15_1_25
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_1.15_0.25'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch1 cycles in load-range 1.25-
    let winch1LoadInRange_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch1CycleAverageLoadRelative
                input2: const real 1.25
    let winch1CyclesInLoadRange_1_25:
        input fn Retain:
            enable: winch1LoadInRange_1_25
            key: 'Winch1CyclesInLoadRange_1.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch1CyclesInLoadRange_1.25'
                input2: const int 1
    let winch1AverageLoadInRabge_1_25_Relative:
        input fn Retain:
            enable: winch1LoadInRange_1_25
            key: 'Winch1AverageLoadInRange_1.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch1LoadInRange_1_25
                        default: winch1CycleAverageLoadRelative
                        key: 'Winch1AverageLoadInRange_1.25'
                    input2: winch1CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.05-0.15
    let winch2LoadInRange_0_05_0_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.05
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.15
    let winch2CyclesInLoadRange_0_05_0_15:
        input fn Retain:
            enable: winch2LoadInRange_0_05_0_15
            key: 'Winch2CyclesInLoadRange_0.05_0.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.05_0.15'
                input2: const int 1
    let winch2AverageLoadInRabge_0_05_0_15_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_05_0_15
            key: 'Winch2AverageLoadInRange_0.05_0.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_05_0_15
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.05_0.15'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.15-0.25
    let winch2LoadInRange_0_15_0_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.15
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.25
    let winch2CyclesInLoadRange_0_15_0_25:
        input fn Retain:
            enable: winch2LoadInRange_0_15_0_25
            key: 'Winch2CyclesInLoadRange_0.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.15_0.25'
                input2: const int 1
    let winch2AverageLoadInRabge_0_15_0_25_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_15_0_25
            key: 'Winch2AverageLoadInRange_0.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_15_0_25
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.15_0.25'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.25-0.35
    let winch2LoadInRange_0_25_0_35:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.25
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.35
    let winch2CyclesInLoadRange_0_25_0_35:
        input fn Retain:
            enable: winch2LoadInRange_0_25_0_35
            key: 'Winch2CyclesInLoadRange_0.25_0.35'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.25_0.35'
                input2: const int 1
    let winch2AverageLoadInRabge_0_25_0_35_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_25_0_35
            key: 'Winch2AverageLoadInRange_0.25_0.35'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_25_0_35
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.25_0.35'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.35-0.45
    let winch2LoadInRange_0_35_0_45:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.35
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.45
    let winch2CyclesInLoadRange_0_35_0_45:
        input fn Retain:
            enable: winch2LoadInRange_0_35_0_45
            key: 'Winch2CyclesInLoadRange_0.35_0.45'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.35_0.45'
                input2: const int 1
    let winch2AverageLoadInRabge_0_35_0_45_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_35_0_45
            key: 'Winch2AverageLoadInRange_0.35_0.45'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_35_0_45
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.35_0.45'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.45-0.55
    let winch2LoadInRange_0_45_0_55:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.45
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.55
    let winch2CyclesInLoadRange_0_45_0_55:
        input fn Retain:
            enable: winch2LoadInRange_0_45_0_55
            key: 'Winch2CyclesInLoadRange_0.45_0.55'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.45_0.55'
                input2: const int 1
    let winch2AverageLoadInRabge_0_45_0_55_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_45_0_55
            key: 'Winch2AverageLoadInRange_0.45_0.55'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_45_0_55
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.45_0.55'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.55-0.65
    let winch2LoadInRange_0_55_0_65:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.55
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.65
    let winch2CyclesInLoadRange_0_55_0_65:
        input fn Retain:
            enable: winch2LoadInRange_0_55_0_65
            key: 'Winch2CyclesInLoadRange_0.55_0.65'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.55_0.65'
                input2: const int 1
    let winch2AverageLoadInRabge_0_55_0_65_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_55_0_65
            key: 'Winch2AverageLoadInRange_0.55_0.65'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_55_0_65
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.55_0.65'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.65-0.75
    let winch2LoadInRange_0_65_0_75:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.65
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.75
    let winch2CyclesInLoadRange_0_65_0_75:
        input fn Retain:
            enable: winch2LoadInRange_0_65_0_75
            key: 'Winch2CyclesInLoadRange_0.65_0.75'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.65_0.75'
                input2: const int 1
    let winch2AverageLoadInRabge_0_65_0_75_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_65_0_75
            key: 'Winch2AverageLoadInRange_0.65_0.75'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_65_0_75
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.65_0.75'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.75-0.85
    let winch2LoadInRange_0_75_0_85:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.75
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.85
    let winch2CyclesInLoadRange_0_75_0_85:
        input fn Retain:
            enable: winch2LoadInRange_0_75_0_85
            key: 'Winch2CyclesInLoadRange_0.75_0.85'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.75_0.85'
                input2: const int 1
    let winch2AverageLoadInRabge_0_75_0_85_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_75_0_85
            key: 'Winch2AverageLoadInRange_0.75_0.85'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_75_0_85
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.75_0.85'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.85-0.95
    let winch2LoadInRange_0_85_0_95:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.85
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.95
    let winch2CyclesInLoadRange_0_85_0_95:
        input fn Retain:
            enable: winch2LoadInRange_0_85_0_95
            key: 'Winch2CyclesInLoadRange_0.85_0.95'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.85_0.95'
                input2: const int 1
    let winch2AverageLoadInRabge_0_85_0_95_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_85_0_95
            key: 'Winch2AverageLoadInRange_0.85_0.95'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_85_0_95
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.85_0.95'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 0.95-1.05
    let winch2LoadInRange_0_95_1_05:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 0.95
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 1.05
    let winch2CyclesInLoadRange_0_95_1_05:
        input fn Retain:
            enable: winch2LoadInRange_0_95_1_05
            key: 'Winch2CyclesInLoadRange_0.95_1.05'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_0.95_1.05'
                input2: const int 1
    let winch2AverageLoadInRabge_0_95_1_05_Relative:
        input fn Retain:
            enable: winch2LoadInRange_0_95_1_05
            key: 'Winch2AverageLoadInRange_0.95_1.05'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_0_95_1_05
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_0.95_1.05'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 1.05-1.15
    let winch2LoadInRange_1_05_1_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 1.05
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 1.15
    let winch2CyclesInLoadRange_1_05_1_15:
        input fn Retain:
            enable: winch2LoadInRange_1_05_1_15
            key: 'Winch2CyclesInLoadRange_1.05_1.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_1.05_1.15'
                input2: const int 1
    let winch2AverageLoadInRabge_1_05_1_15_Relative:
        input fn Retain:
            enable: winch2LoadInRange_1_05_1_15
            key: 'Winch2AverageLoadInRange_1.05_1.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_1_05_1_15
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_1.05_1.15'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 1.15-1.25
    let winch2LoadInRange_1_15_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 1.15
            input3 fn Lt:
                input1: winch2CycleAverageLoadRelative
                input2: const real 1.25
    let winch2CyclesInLoadRange_1_15_1_25:
        input fn Retain:
            enable: winch2LoadInRange_1_15_1_25
            key: 'Winch2CyclesInLoadRange_1.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_1.15_0.25'
                input2: const int 1
    let winch2AverageLoadInRabge_1_15_1_25_Relative:
        input fn Retain:
            enable: winch2LoadInRange_1_15_1_25
            key: 'Winch2AverageLoadInRange_1.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_1_15_1_25
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_1.15_0.25'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch2 cycles in load-range 1.25-
    let winch2LoadInRange_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch2CycleAverageLoadRelative
                input2: const real 1.25
    let winch2CyclesInLoadRange_1_25:
        input fn Retain:
            enable: winch2LoadInRange_1_25
            key: 'Winch2CyclesInLoadRange_1.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch2CyclesInLoadRange_1.25'
                input2: const int 1
    let winch2AverageLoadInRabge_1_25_Relative:
        input fn Retain:
            enable: winch2LoadInRange_1_25
            key: 'Winch2AverageLoadInRange_1.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch2LoadInRange_1_25
                        default: winch2CycleAverageLoadRelative
                        key: 'Winch2AverageLoadInRange_1.25'
                    input2: winch2CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.05-0.15
    let winch3LoadInRange_0_05_0_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.05
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.15
    let winch3CyclesInLoadRange_0_05_0_15:
        input fn Retain:
            enable: winch3LoadInRange_0_05_0_15
            key: 'Winch3CyclesInLoadRange_0.05_0.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.05_0.15'
                input2: const int 1
    let winch3AverageLoadInRabge_0_05_0_15_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_05_0_15
            key: 'Winch3AverageLoadInRange_0.05_0.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_05_0_15
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.05_0.15'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.15-0.25
    let winch3LoadInRange_0_15_0_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.15
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.25
    let winch3CyclesInLoadRange_0_15_0_25:
        input fn Retain:
            enable: winch3LoadInRange_0_15_0_25
            key: 'Winch3CyclesInLoadRange_0.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.15_0.25'
                input2: const int 1
    let winch3AverageLoadInRabge_0_15_0_25_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_15_0_25
            key: 'Winch3AverageLoadInRange_0.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_15_0_25
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.15_0.25'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.25-0.35
    let winch3LoadInRange_0_25_0_35:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.25
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.35
    let winch3CyclesInLoadRange_0_25_0_35:
        input fn Retain:
            enable: winch3LoadInRange_0_25_0_35
            key: 'Winch3CyclesInLoadRange_0.25_0.35'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.25_0.35'
                input2: const int 1
    let winch3AverageLoadInRabge_0_25_0_35_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_25_0_35
            key: 'Winch3AverageLoadInRange_0.25_0.35'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_25_0_35
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.25_0.35'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.35-0.45
    let winch3LoadInRange_0_35_0_45:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.35
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.45
    let winch3CyclesInLoadRange_0_35_0_45:
        input fn Retain:
            enable: winch3LoadInRange_0_35_0_45
            key: 'Winch3CyclesInLoadRange_0.35_0.45'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.35_0.45'
                input2: const int 1
    let winch3AverageLoadInRabge_0_35_0_45_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_35_0_45
            key: 'Winch3AverageLoadInRange_0.35_0.45'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_35_0_45
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.35_0.45'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.45-0.55
    let winch3LoadInRange_0_45_0_55:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.45
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.55
    let winch3CyclesInLoadRange_0_45_0_55:
        input fn Retain:
            enable: winch3LoadInRange_0_45_0_55
            key: 'Winch3CyclesInLoadRange_0.45_0.55'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.45_0.55'
                input2: const int 1
    let winch3AverageLoadInRabge_0_45_0_55_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_45_0_55
            key: 'Winch3AverageLoadInRange_0.45_0.55'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_45_0_55
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.45_0.55'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.55-0.65
    let winch3LoadInRange_0_55_0_65:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.55
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.65
    let winch3CyclesInLoadRange_0_55_0_65:
        input fn Retain:
            enable: winch3LoadInRange_0_55_0_65
            key: 'Winch3CyclesInLoadRange_0.55_0.65'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.55_0.65'
                input2: const int 1
    let winch3AverageLoadInRabge_0_55_0_65_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_55_0_65
            key: 'Winch3AverageLoadInRange_0.55_0.65'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_55_0_65
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.55_0.65'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.65-0.75
    let winch3LoadInRange_0_65_0_75:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.65
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.75
    let winch3CyclesInLoadRange_0_65_0_75:
        input fn Retain:
            enable: winch3LoadInRange_0_65_0_75
            key: 'Winch3CyclesInLoadRange_0.65_0.75'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.65_0.75'
                input2: const int 1
    let winch3AverageLoadInRabge_0_65_0_75_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_65_0_75
            key: 'Winch3AverageLoadInRange_0.65_0.75'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_65_0_75
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.65_0.75'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.75-0.85
    let winch3LoadInRange_0_75_0_85:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.75
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.85
    let winch3CyclesInLoadRange_0_75_0_85:
        input fn Retain:
            enable: winch3LoadInRange_0_75_0_85
            key: 'Winch3CyclesInLoadRange_0.75_0.85'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.75_0.85'
                input2: const int 1
    let winch3AverageLoadInRabge_0_75_0_85_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_75_0_85
            key: 'Winch3AverageLoadInRange_0.75_0.85'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_75_0_85
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.75_0.85'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.85-0.95
    let winch3LoadInRange_0_85_0_95:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.85
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.95
    let winch3CyclesInLoadRange_0_85_0_95:
        input fn Retain:
            enable: winch3LoadInRange_0_85_0_95
            key: 'Winch3CyclesInLoadRange_0.85_0.95'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.85_0.95'
                input2: const int 1
    let winch3AverageLoadInRabge_0_85_0_95_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_85_0_95
            key: 'Winch3AverageLoadInRange_0.85_0.95'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_85_0_95
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.85_0.95'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 0.95-1.05
    let winch3LoadInRange_0_95_1_05:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 0.95
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 1.05
    let winch3CyclesInLoadRange_0_95_1_05:
        input fn Retain:
            enable: winch3LoadInRange_0_95_1_05
            key: 'Winch3CyclesInLoadRange_0.95_1.05'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_0.95_1.05'
                input2: const int 1
    let winch3AverageLoadInRabge_0_95_1_05_Relative:
        input fn Retain:
            enable: winch3LoadInRange_0_95_1_05
            key: 'Winch3AverageLoadInRange_0.95_1.05'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_0_95_1_05
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_0.95_1.05'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 1.05-1.15
    let winch3LoadInRange_1_05_1_15:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 1.05
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 1.15
    let winch3CyclesInLoadRange_1_05_1_15:
        input fn Retain:
            enable: winch3LoadInRange_1_05_1_15
            key: 'Winch3CyclesInLoadRange_1.05_1.15'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_1.05_1.15'
                input2: const int 1
    let winch3AverageLoadInRabge_1_05_1_15_Relative:
        input fn Retain:
            enable: winch3LoadInRange_1_05_1_15
            key: 'Winch3AverageLoadInRange_1.05_1.15'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_1_05_1_15
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_1.05_1.15'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 1.15-1.25
    let winch3LoadInRange_1_15_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 1.15
            input3 fn Lt:
                input1: winch3CycleAverageLoadRelative
                input2: const real 1.25
    let winch3CyclesInLoadRange_1_15_1_25:
        input fn Retain:
            enable: winch3LoadInRange_1_15_1_25
            key: 'Winch3CyclesInLoadRange_1.15_0.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_1.15_0.25'
                input2: const int 1
    let winch3AverageLoadInRabge_1_15_1_25_Relative:
        input fn Retain:
            enable: winch3LoadInRange_1_15_1_25
            key: 'Winch3AverageLoadInRange_1.15_0.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_1_15_1_25
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_1.15_0.25'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0
    #
    # Count of Winch3 cycles in load-range 1.25-
    let winch3LoadInRange_1_25:
        input fn BitAnd:
            input1: opCycleIsDone
            input2 fn Ge:
                input1: winch3CycleAverageLoadRelative
                input2: const real 1.25
    let winch3CyclesInLoadRange_1_25:
        input fn Retain:
            enable: winch3LoadInRange_1_25
            key: 'Winch3CyclesInLoadRange_1.25'
            input fn Add:
                input1 fn Retain:
                    default: const int 0
                    key: 'Winch3CyclesInLoadRange_1.25'
                input2: const int 1
    let winch3AverageLoadInRabge_1_25_Relative:
        input fn Retain:
            enable: winch3LoadInRange_1_25
            key: 'Winch3AverageLoadInRange_1.25'
            input fn Div:
                input1 fn Add:
                    input1 fn Retain:
                        enable: winch3LoadInRange_1_25
                        default: winch3CycleAverageLoadRelative
                        key: 'Winch3AverageLoadInRange_1.25'
                    input2: winch3CycleAverageLoadRelative
                input2: const real 2.0




    #
    # ========= PLOTTING =========
    fn Plot Plot1:
        craneLoadNom: craneLoadNom
        craneLoad: point real '/AppTest/Load'
        craneLoadRelative: craneLoadRelative
        opCycleIsActive: opCycleIsActive
        opCycleIsDone: opCycleIsDone
        craneCycleAverageLoad: craneCycleAverageLoad



    ###############   Operating Cycle + Metrics   ###############
    #
    #   table:      operating_cycle
    #   table:      operating_cycle_metric_value
    #
    fn RecOpCycleMetric:
        send-to: /AppTest/ApiClient.in-queue
        # send-to: /AppTest/TaskTestReceiver.in-queue
        op-cycle: opCycleIsActive
        # conf point OpCycleSql:
        #     type: 'String'
        #
        # Operating cycle
        input1 fn SqlMetric:
            table: public.operating_cycle
            sql: insert into {table} (id, timestamp_start, timestamp_stop, alarm_class) values ({opCycleId.value}, '{start.timestamp}', '{stop.timestamp}', {alarmClass.value});
            opCycleId: opCycleId
            start fn Filter:
                pass fn RisingEdge:
                    input: opCycleIsActive
                input: point real '/AppTest/Load' status ok
            stop: point real '/AppTest/Load' status ok
            alarmClass: alarmClass
        #
        # Operating cycle metric 'Average Load'
        input2 fn SqlMetric:
            table: public.operating_cycle_metric_value
            sql: insert into {table} (operating_cycle_id, pid, metric_id, value) values ({opCycleId.value}, 0, 'average_load', {input.value});
            opCycleId: opCycleId
            input: craneCycleAverageLoad
        #
        # Operating cycle metric 'Max Load'
        input3 fn SqlMetric:
            table: public.operating_cycle_metric_value
            sql: insert into {table} (operating_cycle_id, pid, metric_id, value) values ({opCycleId.value}, 0, 'max_load', {input.value});
            opCycleId: opCycleId
            input: craneCycleMaxLoad
